Instance methods:
These are methods that operate on instances of a class. 
They can access instance variables and other instance methods directly. 
Instance methods are invoked using an object of the class.

Static methods: 
These methods belong to the class rather than to any instance of the class. 
They can access only static variables and other static methods directly. 
Static methods are invoked using the class name.

Getter methods: 
Also known as accessor methods, these methods are used to retrieve the values of instance variables. 
They usually have names prefixed with "get".

Setter methods: 
Also known as mutator methods, these methods are used to modify the values of instance variables. 
They usually have names prefixed with "set".

Constructor methods: 
These methods are used for initializing objects. 
They have the same name as the class and do not have a return type.

Overloaded methods: 
Java allows methods to have the same name but different parameter lists. 
This is called method overloading. 
Java determines which method to execute based on the number and types of arguments passed.

Recursive methods: 
These are methods that call themselves either directly or indirectly in order to solve a problem. 
Recursion is a powerful technique but should be used with caution to avoid infinite loops.

Abstract methods: 
These methods are declared without any implementation in an abstract class. 
Subclasses must provide implementations for these methods.

Final methods: 
When a method is declared as final, 
it cannot be overridden by subclasses.

Synchronized methods: 
These methods are used for thread synchronization. 
They ensure that only one thread can execute the method at a time, 
which is important for preventing data corruption in multi-threaded environments.

Native methods: 
These are methods that are implemented in a language other than Java, such as C or C++. 
They are declared with the native keyword and are implemented outside the Java environment.

*************++++++++++++++++*****************+++++++++++++++***************

there are four pillars of Object-Oriented Programming (OOP) that form the foundation for building robust and modular software. 

************Abstraction**************
Abstraction is the process of hiding implementation details and exposing only the essential functionality to the user.
It allows us to deal with ideas rather than low-level events.

In Java, abstraction can be achieved through:
*Abstract classes: 
These classes can have both abstract methods (with no implementation) and concrete methods (with implementation). 
Abstract classes cannot be instantiated directly.

*Interfaces: 
Interfaces define a contract that classes must adhere to. 
All methods in an interface are implicitly abstract and public.

// Abstract class
public abstract class Car {
    public abstract void stop();
}

// Concrete class
public class Honda extends Car {
    @Override
    public void stop() {
        System.out.println("Honda::Stop");
        System.out.println("Mechanism to stop the car using brakes");
    }
}

public class Main {
    public static void main(String[] args) {
        Car car = new Honda();
        car.stop(); // Call the method
    }
}
*****************Encapsulation*********************
*Encapsulation is the process of wrapping private properties and public method in single unit.
*Encapsulation involves wrapping code and data together into a single unit (a class).

It helps in securing data within classes and controlling access to it.
*steps for achieving encapsulation in Java:
Declare instance variables as private.
Provide setter and getter methods to set and retrieve variable values.

public class Car {
    private String name; // Private variable

    public String getName() {
        return name; // Getter method
    }

    public void setName(String name) {
        this.name = name; // Setter method
    }
}

public class Test {
    public static void main(String[] args) {
        Car car = new Car();
        car.setName("Honda"); // Set value
        System.out.println(car.getName()); // Get value
    }
}

********************Inheritance***********************
Inheritance allows creating new classes (called subclasses or derived classes) based on existing ones (called superclasses or base classes).
It promotes code reusability and establishes a parent-child relationship between classes.

inheritance is a mechanism by which one class acquires the properties (fields and methods) and behaviors of another class. 
The class that is being inherited from is called the superclass or parent class,
 and the class that inherits from it is called the subclass or child class.

Inheritance allows you to create a new class that is built upon an existing class, 
thus reusing existing code, extending its functionality, and facilitating code organization and maintenance. 
The subclass can access the members (fields and methods) of the superclass, but it can also have its own unique members and methods.

you use the extends keyword to indicate that a class is a subclass of another class

class Vehicle {
    void start() {
        System.out.println("Vehicle started");
    }
}

class Car extends Vehicle {
    void accelerate() {
        System.out.println("Car accelerating");
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car();
        myCar.start(); // Inherited method
        myCar.accelerate(); // Car-specific method
    }
}

****************Polymorphism*****************************
Polymorphism allows a method to behave differently based on the input (i.e., the type of object it operates on).

It includes two types:
Compile-time polymorphism: Achieved through method overloading (same method name, different parameters).
Runtime polymorphism: Achieved through method overriding (same method signature in parent and child classes).

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Dog(); // Runtime polymorphism
        myAnimal.makeSound(); // Calls Dog's overridden method
    }
}






